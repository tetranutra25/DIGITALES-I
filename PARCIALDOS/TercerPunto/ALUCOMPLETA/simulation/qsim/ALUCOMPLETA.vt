// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/28/2022 17:49:39"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ALUCOMPLETA
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALUCOMPLETA_vlg_sample_tst(
	A0,
	A1,
	A2,
	A3,
	B0,
	B1,
	B2,
	B3,
	S0,
	S1,
	S2,
	sampler_tx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  B0;
input  B1;
input  B2;
input  B3;
input  S0;
input  S1;
input  S2;
output sampler_tx;

reg sample;
time current_time;
always @(A0 or A1 or A2 or A3 or B0 or B1 or B2 or B3 or S0 or S1 or S2)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ALUCOMPLETA_vlg_check_tst (
	C4,
	K0,
	K1,
	K2,
	K3,
	sampler_rx
);
input  C4;
input  K0;
input  K1;
input  K2;
input  K3;
input sampler_rx;

reg  C4_expected;
reg  K0_expected;
reg  K1_expected;
reg  K2_expected;
reg  K3_expected;

reg  C4_prev;
reg  K0_prev;
reg  K1_prev;
reg  K2_prev;
reg  K3_prev;

reg  C4_expected_prev;
reg  K0_expected_prev;
reg  K1_expected_prev;
reg  K2_expected_prev;
reg  K3_expected_prev;

reg  last_C4_exp;
reg  last_K0_exp;
reg  last_K1_exp;
reg  last_K2_exp;
reg  last_K3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:5] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 5'b1;
end

// update real /o prevs

always @(trigger)
begin
	C4_prev = C4;
	K0_prev = K0;
	K1_prev = K1;
	K2_prev = K2;
	K3_prev = K3;
end

// update expected /o prevs

always @(trigger)
begin
	C4_expected_prev = C4_expected;
	K0_expected_prev = K0_expected;
	K1_expected_prev = K1_expected;
	K2_expected_prev = K2_expected;
	K3_expected_prev = K3_expected;
end



// expected C4
initial
begin
	C4_expected = 1'bX;
end 

// expected K3
initial
begin
	K3_expected = 1'bX;
end 

// expected K2
initial
begin
	K2_expected = 1'bX;
end 

// expected K1
initial
begin
	K1_expected = 1'bX;
end 

// expected K0
initial
begin
	K0_expected = 1'bX;
end 
// generate trigger
always @(C4_expected or C4 or K0_expected or K0 or K1_expected or K1 or K2_expected or K2 or K3_expected or K3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected C4 = %b | expected K0 = %b | expected K1 = %b | expected K2 = %b | expected K3 = %b | ",C4_expected_prev,K0_expected_prev,K1_expected_prev,K2_expected_prev,K3_expected_prev);
	$display("| real C4 = %b | real K0 = %b | real K1 = %b | real K2 = %b | real K3 = %b | ",C4_prev,K0_prev,K1_prev,K2_prev,K3_prev);
`endif
	if (
		( C4_expected_prev !== 1'bx ) && ( C4_prev !== C4_expected_prev )
		&& ((C4_expected_prev !== last_C4_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port C4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", C4_expected_prev);
		$display ("     Real value = %b", C4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_C4_exp = C4_expected_prev;
	end
	if (
		( K0_expected_prev !== 1'bx ) && ( K0_prev !== K0_expected_prev )
		&& ((K0_expected_prev !== last_K0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K0_expected_prev);
		$display ("     Real value = %b", K0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_K0_exp = K0_expected_prev;
	end
	if (
		( K1_expected_prev !== 1'bx ) && ( K1_prev !== K1_expected_prev )
		&& ((K1_expected_prev !== last_K1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K1_expected_prev);
		$display ("     Real value = %b", K1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_K1_exp = K1_expected_prev;
	end
	if (
		( K2_expected_prev !== 1'bx ) && ( K2_prev !== K2_expected_prev )
		&& ((K2_expected_prev !== last_K2_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K2_expected_prev);
		$display ("     Real value = %b", K2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_K2_exp = K2_expected_prev;
	end
	if (
		( K3_expected_prev !== 1'bx ) && ( K3_prev !== K3_expected_prev )
		&& ((K3_expected_prev !== last_K3_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port K3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", K3_expected_prev);
		$display ("     Real value = %b", K3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_K3_exp = K3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ALUCOMPLETA_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A0;
reg A1;
reg A2;
reg A3;
reg B0;
reg B1;
reg B2;
reg B3;
reg S0;
reg S1;
reg S2;
// wires                                               
wire C4;
wire K0;
wire K1;
wire K2;
wire K3;

wire sampler;                             

// assign statements (if any)                          
ALUCOMPLETA i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.C4(C4),
	.K0(K0),
	.K1(K1),
	.K2(K2),
	.K3(K3),
	.S0(S0),
	.S1(S1),
	.S2(S2)
);

// A3
initial
begin
	A3 = 1'b0;
end 

// A2
initial
begin
	A2 = 1'b0;
end 

// A1
initial
begin
	A1 = 1'b1;
end 

// A0
initial
begin
	A0 = 1'b0;
end 

// B3
initial
begin
	B3 = 1'b0;
end 

// B2
initial
begin
	B2 = 1'b0;
end 

// B1
initial
begin
	B1 = 1'b1;
end 

// B0
initial
begin
	B0 = 1'b0;
end 

// S0
initial
begin
	S0 = 1'b1;
end 

// S1
initial
begin
	S1 = 1'b0;
end 

// S2
initial
begin
	S2 = 1'b0;
end 

ALUCOMPLETA_vlg_sample_tst tb_sample (
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.B0(B0),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.S0(S0),
	.S1(S1),
	.S2(S2),
	.sampler_tx(sampler)
);

ALUCOMPLETA_vlg_check_tst tb_out(
	.C4(C4),
	.K0(K0),
	.K1(K1),
	.K2(K2),
	.K3(K3),
	.sampler_rx(sampler)
);
endmodule

