// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/18/2022 15:28:21"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    DECOCUATROADIECISEIS
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module DECOCUATROADIECISEIS_vlg_sample_tst(
	A,
	B,
	C,
	D,
	sampler_tx
);
input  A;
input  B;
input  C;
input  D;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or C or D)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module DECOCUATROADIECISEIS_vlg_check_tst (
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	D7,
	D8,
	D9,
	D10,
	D11,
	D12,
	D13,
	D14,
	D15,
	sampler_rx
);
input  D0;
input  D1;
input  D2;
input  D3;
input  D4;
input  D5;
input  D6;
input  D7;
input  D8;
input  D9;
input  D10;
input  D11;
input  D12;
input  D13;
input  D14;
input  D15;
input sampler_rx;

reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  D4_expected;
reg  D5_expected;
reg  D6_expected;
reg  D7_expected;
reg  D8_expected;
reg  D9_expected;
reg  D10_expected;
reg  D11_expected;
reg  D12_expected;
reg  D13_expected;
reg  D14_expected;
reg  D15_expected;

reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  D4_prev;
reg  D5_prev;
reg  D6_prev;
reg  D7_prev;
reg  D8_prev;
reg  D9_prev;
reg  D10_prev;
reg  D11_prev;
reg  D12_prev;
reg  D13_prev;
reg  D14_prev;
reg  D15_prev;

reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  D4_expected_prev;
reg  D5_expected_prev;
reg  D6_expected_prev;
reg  D7_expected_prev;
reg  D8_expected_prev;
reg  D9_expected_prev;
reg  D10_expected_prev;
reg  D11_expected_prev;
reg  D12_expected_prev;
reg  D13_expected_prev;
reg  D14_expected_prev;
reg  D15_expected_prev;

reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_D4_exp;
reg  last_D5_exp;
reg  last_D6_exp;
reg  last_D7_exp;
reg  last_D8_exp;
reg  last_D9_exp;
reg  last_D10_exp;
reg  last_D11_exp;
reg  last_D12_exp;
reg  last_D13_exp;
reg  last_D14_exp;
reg  last_D15_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:16] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 16'b1;
end

// update real /o prevs

always @(trigger)
begin
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	D5_prev = D5;
	D6_prev = D6;
	D7_prev = D7;
	D8_prev = D8;
	D9_prev = D9;
	D10_prev = D10;
	D11_prev = D11;
	D12_prev = D12;
	D13_prev = D13;
	D14_prev = D14;
	D15_prev = D15;
end

// update expected /o prevs

always @(trigger)
begin
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	D5_expected_prev = D5_expected;
	D6_expected_prev = D6_expected;
	D7_expected_prev = D7_expected;
	D8_expected_prev = D8_expected;
	D9_expected_prev = D9_expected;
	D10_expected_prev = D10_expected;
	D11_expected_prev = D11_expected;
	D12_expected_prev = D12_expected;
	D13_expected_prev = D13_expected;
	D14_expected_prev = D14_expected;
	D15_expected_prev = D15_expected;
end



// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D4
initial
begin
	D4_expected = 1'bX;
end 

// expected D5
initial
begin
	D5_expected = 1'bX;
end 

// expected D6
initial
begin
	D6_expected = 1'bX;
end 

// expected D7
initial
begin
	D7_expected = 1'bX;
end 

// expected D8
initial
begin
	D8_expected = 1'bX;
end 

// expected D9
initial
begin
	D9_expected = 1'bX;
end 

// expected D10
initial
begin
	D10_expected = 1'bX;
end 

// expected D11
initial
begin
	D11_expected = 1'bX;
end 

// expected D12
initial
begin
	D12_expected = 1'bX;
end 

// expected D13
initial
begin
	D13_expected = 1'bX;
end 

// expected D14
initial
begin
	D14_expected = 1'bX;
end 

// expected D15
initial
begin
	D15_expected = 1'bX;
end 
// generate trigger
always @(D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or D5_expected or D5 or D6_expected or D6 or D7_expected or D7 or D8_expected or D8 or D9_expected or D9 or D10_expected or D10 or D11_expected or D11 or D12_expected or D12 or D13_expected or D13 or D14_expected or D14 or D15_expected or D15)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected D5 = %b | expected D6 = %b | expected D7 = %b | expected D8 = %b | expected D9 = %b | expected D10 = %b | expected D11 = %b | expected D12 = %b | expected D13 = %b | expected D14 = %b | expected D15 = %b | ",D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,D5_expected_prev,D6_expected_prev,D7_expected_prev,D8_expected_prev,D9_expected_prev,D10_expected_prev,D11_expected_prev,D12_expected_prev,D13_expected_prev,D14_expected_prev,D15_expected_prev);
	$display("| real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real D5 = %b | real D6 = %b | real D7 = %b | real D8 = %b | real D9 = %b | real D10 = %b | real D11 = %b | real D12 = %b | real D13 = %b | real D14 = %b | real D15 = %b | ",D0_prev,D1_prev,D2_prev,D3_prev,D4_prev,D5_prev,D6_prev,D7_prev,D8_prev,D9_prev,D10_prev,D11_prev,D12_prev,D13_prev,D14_prev,D15_prev);
`endif
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( D4_expected_prev !== 1'bx ) && ( D4_prev !== D4_expected_prev )
		&& ((D4_expected_prev !== last_D4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D4_exp = D4_expected_prev;
	end
	if (
		( D5_expected_prev !== 1'bx ) && ( D5_prev !== D5_expected_prev )
		&& ((D5_expected_prev !== last_D5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D5_exp = D5_expected_prev;
	end
	if (
		( D6_expected_prev !== 1'bx ) && ( D6_prev !== D6_expected_prev )
		&& ((D6_expected_prev !== last_D6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D6_expected_prev);
		$display ("     Real value = %b", D6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D6_exp = D6_expected_prev;
	end
	if (
		( D7_expected_prev !== 1'bx ) && ( D7_prev !== D7_expected_prev )
		&& ((D7_expected_prev !== last_D7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D7_expected_prev);
		$display ("     Real value = %b", D7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D7_exp = D7_expected_prev;
	end
	if (
		( D8_expected_prev !== 1'bx ) && ( D8_prev !== D8_expected_prev )
		&& ((D8_expected_prev !== last_D8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D8_expected_prev);
		$display ("     Real value = %b", D8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D8_exp = D8_expected_prev;
	end
	if (
		( D9_expected_prev !== 1'bx ) && ( D9_prev !== D9_expected_prev )
		&& ((D9_expected_prev !== last_D9_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D9_expected_prev);
		$display ("     Real value = %b", D9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D9_exp = D9_expected_prev;
	end
	if (
		( D10_expected_prev !== 1'bx ) && ( D10_prev !== D10_expected_prev )
		&& ((D10_expected_prev !== last_D10_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D10_expected_prev);
		$display ("     Real value = %b", D10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D10_exp = D10_expected_prev;
	end
	if (
		( D11_expected_prev !== 1'bx ) && ( D11_prev !== D11_expected_prev )
		&& ((D11_expected_prev !== last_D11_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D11_expected_prev);
		$display ("     Real value = %b", D11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D11_exp = D11_expected_prev;
	end
	if (
		( D12_expected_prev !== 1'bx ) && ( D12_prev !== D12_expected_prev )
		&& ((D12_expected_prev !== last_D12_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D12_expected_prev);
		$display ("     Real value = %b", D12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D12_exp = D12_expected_prev;
	end
	if (
		( D13_expected_prev !== 1'bx ) && ( D13_prev !== D13_expected_prev )
		&& ((D13_expected_prev !== last_D13_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D13_expected_prev);
		$display ("     Real value = %b", D13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D13_exp = D13_expected_prev;
	end
	if (
		( D14_expected_prev !== 1'bx ) && ( D14_prev !== D14_expected_prev )
		&& ((D14_expected_prev !== last_D14_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D14_expected_prev);
		$display ("     Real value = %b", D14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D14_exp = D14_expected_prev;
	end
	if (
		( D15_expected_prev !== 1'bx ) && ( D15_prev !== D15_expected_prev )
		&& ((D15_expected_prev !== last_D15_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D15_expected_prev);
		$display ("     Real value = %b", D15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D15_exp = D15_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module DECOCUATROADIECISEIS_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg D;
// wires                                               
wire D0;
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire D6;
wire D7;
wire D8;
wire D9;
wire D10;
wire D11;
wire D12;
wire D13;
wire D14;
wire D15;

wire sampler;                             

// assign statements (if any)                          
DECOCUATROADIECISEIS i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15)
);

// A
initial
begin
	A = 1'b0;
	A = #400000 1'b1;
	A = #400000 1'b0;
end 

// B
initial
begin
	repeat(2)
	begin
		B = 1'b0;
		B = #200000 1'b1;
		# 200000;
	end
	B = 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #100000 1'b1;
	#100000;
end 

// D
always
begin
	D = 1'b0;
	D = #50000 1'b1;
	#50000;
end 

DECOCUATROADIECISEIS_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.C(C),
	.D(D),
	.sampler_tx(sampler)
);

DECOCUATROADIECISEIS_vlg_check_tst tb_out(
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.sampler_rx(sampler)
);
endmodule

