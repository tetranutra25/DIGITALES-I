// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/08/2022 16:37:07"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    RelojSegundero
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module RelojSegundero_vlg_sample_tst(
	CLK,
	sampler_tx
);
input  CLK;
output sampler_tx;

reg sample;
time current_time;
always @(CLK)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module RelojSegundero_vlg_check_tst (
	A0,
	A1,
	A2,
	A3,
	A4,
	A5,
	A6,
	sampler_rx
);
input  A0;
input  A1;
input  A2;
input  A3;
input  A4;
input  A5;
input  A6;
input sampler_rx;

reg  A0_expected;
reg  A1_expected;
reg  A2_expected;
reg  A3_expected;
reg  A4_expected;
reg  A5_expected;
reg  A6_expected;

reg  A0_prev;
reg  A1_prev;
reg  A2_prev;
reg  A3_prev;
reg  A4_prev;
reg  A5_prev;
reg  A6_prev;

reg  A0_expected_prev;
reg  A1_expected_prev;
reg  A2_expected_prev;
reg  A3_expected_prev;
reg  A4_expected_prev;
reg  A5_expected_prev;
reg  A6_expected_prev;

reg  last_A0_exp;
reg  last_A1_exp;
reg  last_A2_exp;
reg  last_A3_exp;
reg  last_A4_exp;
reg  last_A5_exp;
reg  last_A6_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:7] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 7'b1;
end

// update real /o prevs

always @(trigger)
begin
	A0_prev = A0;
	A1_prev = A1;
	A2_prev = A2;
	A3_prev = A3;
	A4_prev = A4;
	A5_prev = A5;
	A6_prev = A6;
end

// update expected /o prevs

always @(trigger)
begin
	A0_expected_prev = A0_expected;
	A1_expected_prev = A1_expected;
	A2_expected_prev = A2_expected;
	A3_expected_prev = A3_expected;
	A4_expected_prev = A4_expected;
	A5_expected_prev = A5_expected;
	A6_expected_prev = A6_expected;
end



// expected A0
initial
begin
	A0_expected = 1'bX;
end 

// expected A1
initial
begin
	A1_expected = 1'bX;
end 

// expected A2
initial
begin
	A2_expected = 1'bX;
end 

// expected A3
initial
begin
	A3_expected = 1'bX;
end 

// expected A4
initial
begin
	A4_expected = 1'bX;
end 

// expected A5
initial
begin
	A5_expected = 1'bX;
end 

// expected A6
initial
begin
	A6_expected = 1'bX;
end 
// generate trigger
always @(A0_expected or A0 or A1_expected or A1 or A2_expected or A2 or A3_expected or A3 or A4_expected or A4 or A5_expected or A5 or A6_expected or A6)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A0 = %b | expected A1 = %b | expected A2 = %b | expected A3 = %b | expected A4 = %b | expected A5 = %b | expected A6 = %b | ",A0_expected_prev,A1_expected_prev,A2_expected_prev,A3_expected_prev,A4_expected_prev,A5_expected_prev,A6_expected_prev);
	$display("| real A0 = %b | real A1 = %b | real A2 = %b | real A3 = %b | real A4 = %b | real A5 = %b | real A6 = %b | ",A0_prev,A1_prev,A2_prev,A3_prev,A4_prev,A5_prev,A6_prev);
`endif
	if (
		( A0_expected_prev !== 1'bx ) && ( A0_prev !== A0_expected_prev )
		&& ((A0_expected_prev !== last_A0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A0_expected_prev);
		$display ("     Real value = %b", A0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A0_exp = A0_expected_prev;
	end
	if (
		( A1_expected_prev !== 1'bx ) && ( A1_prev !== A1_expected_prev )
		&& ((A1_expected_prev !== last_A1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A1_expected_prev);
		$display ("     Real value = %b", A1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_A1_exp = A1_expected_prev;
	end
	if (
		( A2_expected_prev !== 1'bx ) && ( A2_prev !== A2_expected_prev )
		&& ((A2_expected_prev !== last_A2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A2_expected_prev);
		$display ("     Real value = %b", A2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_A2_exp = A2_expected_prev;
	end
	if (
		( A3_expected_prev !== 1'bx ) && ( A3_prev !== A3_expected_prev )
		&& ((A3_expected_prev !== last_A3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A3_expected_prev);
		$display ("     Real value = %b", A3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_A3_exp = A3_expected_prev;
	end
	if (
		( A4_expected_prev !== 1'bx ) && ( A4_prev !== A4_expected_prev )
		&& ((A4_expected_prev !== last_A4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A4_expected_prev);
		$display ("     Real value = %b", A4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_A4_exp = A4_expected_prev;
	end
	if (
		( A5_expected_prev !== 1'bx ) && ( A5_prev !== A5_expected_prev )
		&& ((A5_expected_prev !== last_A5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A5_expected_prev);
		$display ("     Real value = %b", A5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_A5_exp = A5_expected_prev;
	end
	if (
		( A6_expected_prev !== 1'bx ) && ( A6_prev !== A6_expected_prev )
		&& ((A6_expected_prev !== last_A6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A6_expected_prev);
		$display ("     Real value = %b", A6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_A6_exp = A6_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module RelojSegundero_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
// wires                                               
wire A0;
wire A1;
wire A2;
wire A3;
wire A4;
wire A5;
wire A6;

wire sampler;                             

// assign statements (if any)                          
RelojSegundero i1 (
// port map - connection between master ports and signals/registers   
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.CLK(CLK)
);

// CLK
always
begin
	CLK = 1'b0;
	CLK = #5000 1'b1;
	#5000;
end 

RelojSegundero_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.sampler_tx(sampler)
);

RelojSegundero_vlg_check_tst tb_out(
	.A0(A0),
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.sampler_rx(sampler)
);
endmodule

